[{"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/index.js":"1","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/App.js":"2","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/reportWebVitals.js":"3","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/context/EventContext.js":"4","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/Nav.js":"5","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/Footer.js":"6","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Leaderboard.js":"7","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Home.js":"8","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Event.js":"9","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/context/createDataContext.js":"10","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/components/Names.js":"11","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/components/EventQuestion.js":"12"},{"size":610,"mtime":1637376935967,"results":"13","hashOfConfig":"14"},{"size":775,"mtime":1637435042364,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1637368840487,"results":"16","hashOfConfig":"14"},{"size":11064,"mtime":1637437656149,"results":"17","hashOfConfig":"14"},{"size":1073,"mtime":1637438062060,"results":"18","hashOfConfig":"14"},{"size":859,"mtime":1637394249170,"results":"19","hashOfConfig":"14"},{"size":1409,"mtime":1637435525558,"results":"20","hashOfConfig":"14"},{"size":2653,"mtime":1637437684369,"results":"21","hashOfConfig":"14"},{"size":1118,"mtime":1637437703378,"results":"22","hashOfConfig":"14"},{"size":626,"mtime":1637394393757,"results":"23","hashOfConfig":"14"},{"size":2256,"mtime":1637435164277,"results":"24","hashOfConfig":"14"},{"size":5782,"mtime":1637437656152,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p62skl",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/index.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/App.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/reportWebVitals.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/context/EventContext.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/Nav.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/Footer.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Leaderboard.js",["54","55","56"],"import React, {useContext} from 'react';\nimport '../styling/home.css'\nimport { isMobile } from 'react-device-detect';\nimport { Button } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport {Context as EventContext } from '../context/EventContext';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Beaker from '../assets/beaker.png';\n\nfunction Leaderboard() {\n\n  const { state} = useContext(EventContext)\n\n  const display_names = (names) => {\n    \n  }\n  \n  if (isMobile) {\n    return (\n        <div className=\"background-container\">    \n         <div className=\"home-text\">\n            <div className=\"home-text-border-box\" >\n              <img src={Beaker} alt=\"beaker\" />\n              <img src={Beaker} alt=\"beaker\" />\n              <img src={Beaker} alt=\"beaker\" />\n            </div>\n            <h1 style={{fontSize: \"2rem\", margin: \"0\"}}> Final Results! </h1>\n\n            <div style={{flexDirection: 'row'}}>\n              <p>{state.names.name1}, {state.names.name2}, {state.names.name3}, {state.names.name4} </p>\n              <p>Fianl Score: {state.gScore.curScore} / {state.gScore.totScore}</p>\n            </div>\n\n          </div>\n        </div>\n      )\n    } else {\n      return ( \n        <div className=\"background-container\">\n            <h1> SMACS 2021 </h1> \n            <h1> Scavenger Hunt </h1>\n        </div>\n      )\n    }\n}\n    \n\nexport default Leaderboard;\n","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Home.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/routes/Event.js",["57"],"import React, { useContext, useEffect } from 'react';\n// import React from 'react';\nimport '../styling/home.css'\nimport { isMobile } from 'react-device-detect';\n// import { Button } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport {Context as EventContext } from '../context/EventContext';\nimport EventQuestion from '../components/EventQuestion';\n\nfunction Event() {\n    const { state} = useContext(EventContext)\n    const history = useHistory();\n\n    useEffect(() => {\n      if ( state.complete ) {\n        history.push('/Leaderboard')\n      }\n    }, [state.complete])\n    if (isMobile) {\n      return (\n        <div className=\"background-container\"> \n          <div className=\"event-score-container\">\n            <p>Score: {state.gScore.curScore} / {state.gScore.totScore}</p>\n          </div>\n\n          <EventQuestion/>\n        </div>\n      )\n\n    } else {\n      return ( \n        <div className=\"background-container\">\n          <h1>If you navigate away from this page, you may lose progress.</h1>\n          <EventQuestion/>\n        </div>\n      )\n    }\n}\n    \n\nexport default Event;\n","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/context/createDataContext.js",[],"/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/components/Names.js",["58"],"import React, {useContext, useState, useEffect} from 'react'\nimport '../styling/home.css'\nimport {Context as EventContext } from '../context/EventContext';\nimport { isMobile } from 'react-device-detect';\n\nconst Names = () => {\n\n    const { \n        state, update_names\n    } = useContext(EventContext)\n    const [names, setNames] = useState(state.names);\n        const handleChange = (val, name_num) => {\n            setNames(prevState => ({\n                ...prevState,\n                [name_num]: val\n            }));\n        };\n\n    if (isMobile) {\n        return (\n        \n      <div style={{flexDirection: 'row'}}>\n          Enter names for up to 4 group members\n              <input\n                    value={names.name1}\n                    type=\"text\"\n                    onChange={(e) => {\n                        update_names(e.target.value, \"name1\")\n                        handleChange(e.target.value, \"name1\")\n                    }}\n                    name=\"name1\"\n                />\n                <input\n                    value={names.name2}\n                    type=\"text\"\n                    onChange={(e) => {\n                        update_names(e.target.value, \"name2\")\n                        handleChange(e.target.value, \"name2\")\n                    }}\n                    name=\"name2\"\n                />\n                <input\n                    value={names.name3}\n                    type=\"text\"\n                    onChange={(e) => {\n                        update_names(e.target.value, \"name3\")\n                        handleChange(e.target.value, \"name3\")\n                    }}\n                    name=\"name3\"\n                />\n                <input\n                    value={names.name4}\n                    type=\"text\"\n                    onChange={(e) => {\n                        update_names(e.target.value, \"name4\")\n                        handleChange(e.target.value, \"name4\")\n                    }}\n                    name=\"name4\"\n                />\n          \n        </div>\n        )\n      } else {\n        return ( \n          <div className=\"evnetQuestion-container\">\n            <div className='home-text'>\n              \n            </div>  \n          </div>\n        )\n      }\n\n}\nexport default Names;","/Users/austinwallace/smacs/ChemistryScavengerHunt/backend/frontend/src/components/EventQuestion.js",["59","60","61"],"import React, {useContext, useState, useEffect} from 'react'\nimport '../styling/home.css'\nimport {Context as EventContext } from '../context/EventContext';\nimport { isMobile } from 'react-device-detect';\nimport { Button } from 'react-bootstrap';\nimport Atom from '../assets/atom.png'\nimport { height } from 'dom-helpers';\n\nconst eval_to_user = (attempt, err) => {\n    if(attempt > 0){\n        if ( !err ) {\n            return (\n                <p style={{color: '#de354c'}}> Incorrect. Try again! </p>\n            )\n        } else {\n            return (\n                <p style={{color: 'green'}}> Correct! </p>\n            )\n        }\n    } else {\n        return null\n    }\n}\n\nconst EventQuestion = () => {\n    const [attempts, setAttempts] = useState(0)\n    const [textInput, setTextInput] = useState('')\n    const { \n        state, update_answer, \n        submit_answers, next_question,\n        count_total_score\n    } = useContext(EventContext)\n    \n    const station = state.stations[state.position];\n    function submission() {\n        setAttempts(attempts+1)\n        submit_answers(attempts)\n        count_total_score()\n    }\n\n    if (isMobile) {\n        return (\n          <div className=\"big-event-container\"> \n       \n           <div className=\"event-container\">\n\n            <img src={Atom} style={{alignSelf: \"center\", width: \"100px\", heiht: \"auto\"}}/>\n\n            <div className=\"event-header-container\">\n              <p>Station: {station.station}</p>\n              <p1>Clue: {station.clue}</p1>\n            </div> \n\n            <div className=\"event-container-bottom\">\n                <p>Multiple Choice Answer</p>\n                <form className={\"radio-form\"}>\n\n                    <label> \n                        <input\n                        type=\"radio\"\n                        value=\"A\"\n                        checked={station.answer1 === \"A\"}\n                        onChange={(answer) => update_answer(answer.target.value, 'answer1')}\n                        />\n                        A\n                    </label>\n\n                    <label> \n                        <input\n                        type=\"radio\"\n                        value=\"B\"\n                        checked={station.answer1 === \"B\"}\n                        onChange={(answer) => update_answer(answer.target.value, 'answer1')}\n                        />\n                        B\n                    \n                    </label> \n                    \n                    <label> \n                        <input\n                        type=\"radio\"\n                        value=\"C\"\n                        checked={station.answer1 === \"C\"}\n                        onChange={(answer) => update_answer(answer.target.value, 'answer1')}\n                        />\n                        C\n                    </label> \n                    \n                    <label> \n                        <input\n                        type=\"radio\"\n                        value=\"D\"\n                        checked={station.answer1 === \"D\"}\n                        onChange={(answer) => update_answer(answer.target.value, 'answer1')}\n                        />\n                        D\n                    </label> \n                    \n                    <label> \n                        <input\n                        type=\"radio\"\n                        value=\"E\"\n                        checked={station.answer1 === \"E\"}\n                        onChange={(answer) => update_answer(answer.target.value, 'answer1')}\n                        />\n                        E\n                    </label> \n\n                    {eval_to_user(attempts, state.correct1)}\n                   \n                    <div>\n                   \n                    </div>\n                </form>\n\n              <div style={{flexDirection: 'row'}}>\n                <p>Free Response Answer:</p>\n                <input \n                    type=\"text\" \n                    onChange={(answer) => {\n                        update_answer(answer.target.value, 'answer2')\n                        setTextInput(answer.target.value)\n                    }\n                    }\n                    value={textInput}\n                    \n                    />\n                {eval_to_user(attempts, state.correct2)}\n              </div>\n            \n            {attempts > 0 ? \n                <p>Attempts Submitted: {attempts}</p> : null\n            }\n            \n            </div>\n            <Button variant=\"btn btn-success\" style={{marginTop: \"5%\", width: \"75%\", alignSelf: \"center\", backgroundColor:\"#3c1874\"}}onClick={(e) => submission() }>Submit Answers!</Button>\n\n            {\n                state.correct1 && state.correct2 && attempts > 0 ? (\n                    <Button variant=\"btn btn-success\" style={{marginTop: \"2%\", width: \"75%\", alignSelf: \"center\", backgroundColor:\"#3c1874\"}} onClick={() => {\n                        next_question(attempts) \n                        setTextInput(\"\")\n                        setAttempts(0)\n                    }\n                }>Next Question!</Button>\n                ) : (null)\n            }\n\n            {\n                (!state.correct1 || !state.correct2) && attempts > 3 ? (\n                    <Button variant=\"btn btn-success\" onClick={() => {\n                        next_question(attempts) \n                        setTextInput(\"\")\n                        setAttempts(0)\n                    }\n                }>Give up</Button>\n                ) : (null)\n            }\n\n\n            </div>      \n          </div>\n        )\n      } else {\n        return ( \n          <div className=\"evnetQuestion-container\">\n            <div className='home-text'>\n              \n            </div>  \n          </div>\n        )\n      }\n\n}\nexport default EventQuestion;",{"ruleId":"62","severity":1,"message":"63","line":4,"column":10,"nodeType":"64","messageId":"65","endLine":4,"endColumn":16},{"ruleId":"62","severity":1,"message":"66","line":5,"column":10,"nodeType":"64","messageId":"65","endLine":5,"endColumn":20},{"ruleId":"62","severity":1,"message":"67","line":14,"column":9,"nodeType":"64","messageId":"65","endLine":14,"endColumn":22},{"ruleId":"68","severity":1,"message":"69","line":18,"column":8,"nodeType":"70","endLine":18,"endColumn":24,"suggestions":"71"},{"ruleId":"62","severity":1,"message":"72","line":1,"column":38,"nodeType":"64","messageId":"65","endLine":1,"endColumn":47},{"ruleId":"62","severity":1,"message":"72","line":1,"column":38,"nodeType":"64","messageId":"65","endLine":1,"endColumn":47},{"ruleId":"62","severity":1,"message":"73","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":16},{"ruleId":"74","severity":1,"message":"75","line":47,"column":13,"nodeType":"76","endLine":47,"endColumn":91},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'display_names' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'useEffect' is defined but never used.","'height' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"78","fix":"79"},"Update the dependencies array to be: [history, state.complete]",{"range":"80","text":"81"},[581,597],"[history, state.complete]"]